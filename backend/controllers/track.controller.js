import TrackService from "../services/TrackService.js";
import { ApiResponse } from "../utils/responses.js";
import { catchAsync } from "../utils/helpers.js";
import { generateSignedUrl, extractFileName } from "../utils/b2SignedUrl.js";
import Track from "../models/Track.model.js";

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ - –í–°–ï–ì–î–ê HLS
export const createTrack = catchAsync(async (req, res) => {
  const track = await TrackService.createTrackWithHLS(
    // –¢–æ–ª—å–∫–æ HLS!
    req.body,
    req.files,
    req.user?.id
  );

  res.status(201).json(ApiResponse.success("–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω", track));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤
export const getAllTracks = catchAsync(async (req, res) => {
  const { page, limit, sortBy, sortOrder } = req.query;

  const result = await TrackService.getAllTracks({
    page: parseInt(page) || 1,
    limit: parseInt(limit) || 20,
    sortBy: sortBy || "createdAt",
    sortOrder: parseInt(sortOrder) || -1,
  });

  res.json(ApiResponse.success("–¢—Ä–µ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã", result));
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ ID
export const getTrackById = catchAsync(async (req, res) => {
  const { id } = req.params;
  const track = await TrackService.getTrackById(id);

  if (!track) {
    return res.status(404).json(ApiResponse.error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
  }

  res.json(ApiResponse.success("–¢—Ä–µ–∫ –ø–æ–ª—É—á–µ–Ω", track));
});

// –ï–î–ò–ù–´–ô —Å—Ç—Ä–∏–º–∏–Ω–≥ endpoint - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
export const streamTrack = catchAsync(async (req, res) => {
  const { id, segmentName } = req.params;
  const track = await Track.findById(id);

  if (!track) {
    return res.status(404).json(ApiResponse.error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–Ω–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
  if (!segmentName) {
    await Track.findByIdAndUpdate(id, { $inc: { listenCount: 1 } });
  }

  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ URL
    const requestPath = req.path;

    if (segmentName) {
      // –ó–∞–ø—Ä–æ—Å —Å–µ–≥–º–µ–Ω—Ç–∞: /api/tracks/:id/segment/:segmentName
      console.log(`üì¶ –ó–∞–ø—Ä–æ—Å —Å–µ–≥–º–µ–Ω—Ç–∞: ${segmentName}`);

      const segmentUrl = track.hlsSegments.find((url) =>
        extractFileName(url).includes(segmentName)
      );

      if (!segmentUrl) {
        return res.status(404).json(ApiResponse.error("–°–µ–≥–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"));
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –∏ –ø—Ä–æ–∫—Å–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
      const signedUrl = await generateSignedUrl(
        extractFileName(segmentUrl),
        7200
      );

      console.log(`üîó –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç: ${segmentUrl}`);

      // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      const response = await fetch(signedUrl);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è .ts —Ñ–∞–π–ª–æ–≤
      res.set({
        "Content-Type": "video/mp2t",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Range",
        "Cache-Control": "public, max-age=31536000", // –ö–µ—à –Ω–∞ –≥–æ–¥ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤
      });

      // –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const buffer = await response.arrayBuffer();
      res.send(Buffer.from(buffer));
    } else if (
      requestPath.includes("playlist.m3u8") ||
      requestPath.includes("stream")
    ) {
      // –ó–∞–ø—Ä–æ—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞: /api/tracks/:id/playlist.m3u8 –∏–ª–∏ /api/tracks/:id/stream
      console.log(`üìã –ó–∞–ø—Ä–æ—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: ${track.name}`);

      const playlistUrl = await generateSignedUrl(
        extractFileName(track.audioUrl),
        7200
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
      const response = await fetch(playlistUrl);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      let playlist = await response.text();

      // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –Ω–∞ URLs –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      const lines = playlist.split("\n");
      const updatedLines = lines.map((line) => {
        if (line.endsWith(".ts")) {
          // –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ URL –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
          const segmentName = line.trim();
          return `${req.protocol}://${req.get(
            "host"
          )}/api/tracks/${id}/segment/${segmentName}`;
        }
        return line;
      });

      const updatedPlaylist = updatedLines.join("\n");

      console.log("üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç:");
      console.log(updatedPlaylist);

      res.set({
        "Content-Type": "application/vnd.apple.mpegurl",
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Range",
      });

      res.send(updatedPlaylist);
    } else {
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
      return res.status(400).json(ApiResponse.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"));
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:", error);
    res
      .status(500)
      .json(ApiResponse.error(`–û—à–∏–±–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞: ${error.message}`));
  }
});

// –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤
export const searchTracks = catchAsync(async (req, res) => {
  const { q, page, limit } = req.query;

  if (!q) {
    return res
      .status(400)
      .json(ApiResponse.error("–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"));
  }

  const result = await TrackService.searchTracks(q, {
    page: parseInt(page) || 1,
    limit: parseInt(limit) || 20,
  });

  res.json(ApiResponse.success("–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω", result));
});

// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –≤ streamTrack)
export const incrementListenCount = catchAsync(async (req, res) => {
  const { id } = req.params;
  const track = await TrackService.incrementListenCount(id);

  if (!track) {
    return res.status(404).json(ApiResponse.error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
  }

  res.json(ApiResponse.success("–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω", track));
});

// –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
export const deleteTrack = catchAsync(async (req, res) => {
  const { id } = req.params;
  const result = await TrackService.deleteTrack(id, req.user?.id);

  if (!result) {
    return res
      .status(404)
      .json(ApiResponse.error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"));
  }

  res.json(ApiResponse.success("–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"));
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
export const updateTrack = catchAsync(async (req, res) => {
  const { id } = req.params;
  const track = await TrackService.updateTrack(id, req.body, req.user?.id);

  if (!track) {
    return res
      .status(404)
      .json(ApiResponse.error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤"));
  }

  res.json(ApiResponse.success("–¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", track));
});
