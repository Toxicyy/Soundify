import { config } from "../config/config.js";
import B2 from "backblaze-b2";

const b2 = new B2({
  applicationKeyId: config.b2.accountId,
  applicationKey: config.b2.secretKey,
});

// –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
let authData = null;
let authExpiry = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const ensureAuthorized = async () => {
  if (!authData || (authExpiry && Date.now() > authExpiry)) {
    try {
      console.log("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2...");
      authData = await b2.authorize();
      // –ö–µ—à–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ 23 —á–∞—Å–∞ (—Ç–æ–∫–µ–Ω –∂–∏–≤–µ—Ç 24 —á–∞—Å–∞)
      authExpiry = Date.now() + 23 * 60 * 60 * 1000;
      console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ B2 —É—Å–ø–µ—à–Ω–∞");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ B2:", error);
      throw error;
    }
  }
  return authData;
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è retry
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
export const uploadToB2 = async (file, folder, maxRetries = 5) => {
  let lastError;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      if (attempt > 1) {
        console.log(
          `üì§ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${attempt}/${maxRetries}: ${file.originalname}`
        );
      }

      // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
      await ensureAuthorized();

      const fileName = `${folder}/${Date.now()}-${file.originalname}`;

      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
      const uploadUrl = await b2.getUploadUrl({
        bucketId: config.b2.bucketId,
      });

      if (attempt === 1) {
        console.log(
          `‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: ${fileName} (${(
            file.buffer.length /
            1024 /
            1024
          ).toFixed(2)} MB)`
        );
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const response = await b2.uploadFile({
        uploadUrl: uploadUrl.data.uploadUrl,
        uploadAuthToken: uploadUrl.data.authorizationToken,
        fileName,
        data: file.buffer,
      });

      if (attempt === 1) {
        console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: ${fileName}`);
      } else {
        console.log(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —Å –ø–æ–ø—ã—Ç–∫–∏ ${attempt}: ${fileName}`);
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å URL –∏ fileId
      return {
        url:
          response.data.fileUrl ||
          `https://f003.backblazeb2.com/file/${config.b2.bucketName}/${fileName}`,
        fileId: response.data.fileId,
        fileName: fileName,
      };
    } catch (error) {
      lastError = error;

      if (attempt === 1) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.originalname}:`,
          error.message
        );
      } else {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (error.response) {
        const status = error.response.status;

        switch (status) {
          case 503:
            console.warn("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (503)");
            break;
          case 429:
            console.warn("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)");
            break;
          case 401:
            console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω");
            authData = null;
            authExpiry = null;
            break;
          case 400:
            console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (400), –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º");
            throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ B2: ${error.message}`);
          default:
            console.error(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${status}`);
        }
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (attempt === maxRetries) {
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ B2: ${lastError.message}`);
      }

      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è 503 –æ—à–∏–±–æ–∫
      let delayMs;
      if (error.response && error.response.status === 503) {
        // –î–ª—è 503 –æ—à–∏–±–æ–∫ - –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        delayMs = Math.min(Math.pow(3, attempt) * 1000, 30000); // –¥–æ 30 —Å–µ–∫—É–Ω–¥
      } else {
        delayMs = Math.pow(2, attempt) * 1000;
      }
      await delay(delayMs);
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫
export const uploadMultipleToB2 = async (files, folder, concurrency = 3) => {

  const results = [];

  // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –±–∞—Ç—á–∏
  for (let i = 0; i < files.length; i += concurrency) {
    const batch = files.slice(i, i + concurrency);
    const batchNumber = Math.floor(i / concurrency) + 1;

    try {
      const batchResults = await Promise.all(
        batch.map((file) => uploadToB2(file, folder))
      );
      results.push(...batchResults);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, error.message);
      throw error;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ B2
    if (i + concurrency < files.length) {
      await delay(500);
    }
  }

  return results;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ B2
export const checkB2Status = async () => {
  try {
    await ensureAuthorized();

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ bucket
    const buckets = await b2.listBuckets();
    const targetBucket = buckets.data.buckets.find(
      (bucket) => bucket.bucketId === config.b2.bucketId
    );

    if (!targetBucket) {
      throw new Error("Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    return true;
  } catch (error) {
    console.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ B2:", error.message);
    return false;
  }
};

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
export const uploadToB2Legacy = async (file, folder) => {
  const result = await uploadToB2(file, folder);
  return result.url; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ URL –∫–∞–∫ —Ä–∞–Ω—å—à–µ
};
