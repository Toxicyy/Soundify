import Track from "../models/Track.model.js";
import { uploadToB2 } from "../utils/upload.js";
import { generateSignedUrl, extractFileName } from "../utils/b2SignedUrl.js";
import {
  processAudioToHLS,
  checkFFmpegAvailability,
} from "../utils/audioProcessor.js";
import { config } from "../config/config.js";
import B2 from "backblaze-b2";
import fs from "fs/promises";

class TrackService {
  // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ B2 –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  async checkB2Access() {
    try {
      const b2 = new B2({
        applicationKeyId: config.b2.accountId,
        applicationKey: config.b2.secretKey,
      });

      await b2.authorize();
      console.log("‚úÖ B2 –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ bucket —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      try {
        const buckets = await b2.listBuckets();
        const targetBucket = buckets.data.buckets.find(
          (bucket) => bucket.bucketId === config.b2.bucketId
        );

        if (!targetBucket) {
          console.warn("‚ö†Ô∏è Bucket –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö");
          return false;
        }

        console.log("‚úÖ B2 bucket –¥–æ—Å—Ç—É–ø–µ–Ω:", targetBucket.bucketName);
        return true;
      } catch (bucketError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket:", bucketError.message);
        if (bucketError.response && bucketError.response.status === 401) {
          console.warn(
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ bucket. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ Application Key"
          );
        }
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –∞ bucket –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–∞–≤
        return true;
      }
    } catch (error) {
      console.error("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å B2:", error.message);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞
  async checkSystemRequirements() {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π TrackService...");

    let ffmpegReady = false;
    let b2Ready = false;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
      console.log("üé¨ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg –≤ TrackService...");

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg –ø—Ä—è–º–æ –∑–¥–µ—Å—å
      const ffmpegPath = await import("@ffmpeg-installer/ffmpeg");
      console.log("üìÅ FFmpeg –ø—É—Ç—å –≤ TrackService:", ffmpegPath.default.path);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ audioProcessor
      const result = await checkFFmpegAvailability();
      console.log("‚úÖ checkFFmpegAvailability –≤–µ—Ä–Ω—É–ª–∞:", result);
      ffmpegReady = true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ FFmpeg –≤ checkSystemRequirements:", error);
      ffmpegReady = false;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º B2 (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤)
      const b2Result = await this.checkB2Access();
      b2Ready = b2Result;
    } catch (error) {
      console.warn("‚ö†Ô∏è B2 –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:", error.message);
      b2Ready = false;
    }

    console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: FFmpeg=${ffmpegReady}, B2=${b2Ready}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –µ—Å–ª–∏ FFmpeg –≥–æ—Ç–æ–≤ (B2 –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
    return ffmpegReady;
  }

  async createTrack(trackData, files, userId) {
    const { name, artist, genre, tags, duration } = trackData;

    if (!files || !files.audio || !files.cover) {
      throw new Error("–ê—É–¥–∏–æ —Ñ–∞–π–ª –∏ –æ–±–ª–æ–∂–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –≤ B2
      const audioUpload = await uploadToB2(files.audio[0], "audio");
      const coverUpload = await uploadToB2(files.cover[0], "images");

      const audioUrl = audioUpload.url;
      const coverUrl = coverUpload.url;

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫
      const track = new Track({
        name: name.trim(),
        artist: artist.trim(),
        audioUrl,
        coverUrl,
        genre: genre?.trim(),
        tags: tags ? tags.split(",").map((tag) => tag.trim()) : [],
        duration: parseInt(duration) || 0,
        isPublic: true,
        uploadedBy: userId,
      });

      await track.save();
      return track;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${error.message}`);
    }
  }

  async createTrackWithHLS(trackData, files, userId) {
    const { name, artist, genre, tags } = trackData;

    if (!files || !files.audio || !files.cover) {
      throw new Error("–ê—É–¥–∏–æ —Ñ–∞–π–ª –∏ –æ–±–ª–æ–∂–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã");
    }

    console.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ HLS —Ç—Ä–µ–∫–∞: ${name}`);
    console.log(
      `üìÅ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: ${(
        files.audio[0].buffer.length /
        1024 /
        1024
      ).toFixed(2)} MB`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    try {
      console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º FFmpeg –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–∞...");
      const ffmpegCheck = await this.checkSystemRequirements();
      if (!ffmpegCheck) {
        throw new Error(
          "FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É @ffmpeg-installer/ffmpeg"
        );
      }
      console.log("‚úÖ FFmpeg –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
    } catch (systemError) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg:", systemError);
      throw new Error(`FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${systemError.message}`);
    }

    let tempDir = null;

    try {
      console.log(`üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–µ–∫–∞: ${name}`);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ –≤ HLS
      const hlsData = await processAudioToHLS(
        files.audio[0].buffer,
        files.audio[0].originalname
      );

      tempDir = hlsData.tempDir; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é

      console.log(
        `üìÅ HLS –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${hlsData.segments.length}`
      );

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–ª–æ–∂–∫—É –∫–∞–∫ –æ–±—ã—á–Ω–æ
      const coverUpload = await uploadToB2(files.cover[0], "images");

      // –ó–∞–≥—Ä—É–∂–∞–µ–º HLS —Ñ–∞–π–ª—ã –≤ B2 —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é
      const folderName = `hls/${Date.now()}-${name.replace(
        /[^a-zA-Z0-9]/g,
        "-"
      )}`;

      console.log(`‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º HLS —Ñ–∞–π–ª—ã –≤ B2: ${folderName}`);

      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
      const playlistUpload = await uploadToB2(
        {
          buffer: Buffer.from(hlsData.playlist),
          originalname: "playlist.m3u8",
          mimetype: "application/vnd.apple.mpegurl",
        },
        folderName
      );

      console.log(`‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${playlistUpload.fileName}`);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–∞–∫–µ—Ç–∞–º–∏ (–ø–æ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ) –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è 503 –æ—à–∏–±–æ–∫
      const segmentFiles = hlsData.segments.map((segment) => ({
        buffer: segment.buffer,
        originalname: segment.name,
        mimetype: "video/mp2t",
      }));

      const segmentUploads = [];
      const batchSize = 3; // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 2 —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ

      for (let i = 0; i < segmentFiles.length; i += batchSize) {
        const batch = segmentFiles.slice(i, i + batchSize);
        const batchNumber = Math.floor(i / batchSize) + 1;
        const totalBatches = Math.ceil(segmentFiles.length / batchSize);

        console.log(
          `üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á ${batchNumber}/${totalBatches} (${batch.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤)`
        );

        try {
          const batchResults = await Promise.all(
            batch.map((segment) => uploadToB2(segment, folderName, 5)) // 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
          );
          segmentUploads.push(...batchResults);

          console.log(`‚úÖ –ë–∞—Ç—á ${batchNumber} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);

          // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ B2
          if (i + batchSize < segmentFiles.length) {
            const pauseDuration = 1000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            console.log(
              `‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏: ${pauseDuration / 1000} —Å–µ–∫—É–Ω–¥`
            );
            await new Promise((resolve) => setTimeout(resolve, pauseDuration));
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ ${batchNumber}:`, error.message);

          // –ï—Å–ª–∏ –±–∞—Ç—á –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
          console.log(
            `üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑ –±–∞—Ç—á–∞ ${batchNumber} –ø–æ –æ–¥–Ω–æ–º—É...`
          );
          try {
            for (const segment of batch) {
              console.log(
                `üì§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: ${segment.originalname}`
              );
              const result = await uploadToB2(segment, folderName, 5);
              segmentUploads.push(result);

              // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
              await new Promise((resolve) => setTimeout(resolve, 1000));
            }
            console.log(`‚úÖ –ë–∞—Ç—á ${batchNumber} –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É`);
          } catch (individualError) {
            console.error(
              `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞—Ç—á–µ ${batchNumber}:`,
              individualError.message
            );
            throw individualError;
          }
        }
      }

      console.log(`‚úÖ –í—Å–µ ${segmentUploads.length} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ B2`);

      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (tempDir) {
        await fs.rm(tempDir, { recursive: true, force: true });
        console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã`);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
      const duration = calculateDurationFromPlaylist(hlsData.playlist);

      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫
      const track = new Track({
        name: name.trim(),
        artist: artist.trim(),
        audioUrl: playlistUpload.url, // –°—Å—ã–ª–∫–∞ –Ω–∞ m3u8
        hlsSegments: segmentUploads.map((upload) => upload.url), // –ú–∞—Å—Å–∏–≤ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        coverUrl: coverUpload.url,
        genre: genre?.trim(),
        tags: tags ? tags.split(",").map((tag) => tag.trim()) : [],
        duration: Math.round(duration),
        isPublic: true,
        isHLS: true, // –§–ª–∞–≥ HLS —Ç—Ä–µ–∫–∞
        uploadedBy: userId,
      });

      await track.save();
      console.log(`üíæ –¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${track._id}`);

      return track;
    } catch (error) {
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (tempDir) {
        try {
          await fs.rm(tempDir, { recursive: true, force: true });
          console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏`);
        } catch (cleanupError) {
          console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", cleanupError);
        }
      }

      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HLS —Ç—Ä–µ–∫–∞:`, error);
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ HLS —Ç—Ä–µ–∫–∞: ${error.message}`);
    }
  }

  async getAllTracks({
    page = 1,
    limit = 20,
    sortBy = "createdAt",
    sortOrder = -1,
  }) {
    try {
      const skip = (page - 1) * limit;
      const sort = { [sortBy]: sortOrder };

      const tracks = await Track.find({ isPublic: true })
        .sort(sort)
        .skip(skip)
        .limit(limit)
        .populate("uploadedBy", "name username avatar");

      const total = await Track.countDocuments({ isPublic: true });
      const totalPages = Math.ceil(total / limit);

      const tracksWithSignedUrls = await this.addSignedUrlsToTracks(tracks);

      return {
        tracks: tracksWithSignedUrls,
        pagination: {
          currentPage: page,
          totalPages,
          totalTracks: total,
          hasNextPage: page < totalPages,
          hasPrevPage: page > 1,
        },
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: ${error.message}`);
    }
  }

  async searchTracks(query, { page = 1, limit = 20 }) {
    try {
      const skip = (page - 1) * limit;

      const searchCondition = {
        $and: [
          { isPublic: true },
          {
            $or: [
              { name: { $regex: query, $options: "i" } },
              { artist: { $regex: query, $options: "i" } },
              { genre: { $regex: query, $options: "i" } },
              { tags: { $in: [new RegExp(query, "i")] } },
            ],
          },
        ],
      };

      const tracks = await Track.find(searchCondition)
        .sort({ listenCount: -1, createdAt: -1 })
        .skip(skip)
        .limit(limit)
        .populate("uploadedBy", "name username avatar");

      const total = await Track.countDocuments(searchCondition);
      const totalPages = Math.ceil(total / limit);
      const tracksWithSignedUrls = await this.addSignedUrlsToTracks(tracks);
      return {
        tracks: tracksWithSignedUrls,
        query,
        pagination: {
          currentPage: page,
          totalPages,
          totalTracks: total,
          hasNextPage: page < totalPages,
          hasPrevPage: page > 1,
        },
      };
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤: ${error.message}`);
    }
  }

  async incrementListenCount(trackId) {
    try {
      const track = await Track.findByIdAndUpdate(
        trackId,
        { $inc: { listenCount: 1 } },
        { new: true }
      ).populate("uploadedBy", "name username avatar");

      return track;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: ${error.message}`);
    }
  }

  async getTrackById(trackId) {
    try {
      const track = await Track.findById(trackId).populate(
        "uploadedBy",
        "name username avatar"
      );

      if (!track) {
        throw new Error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
      const trackWithSignedUrls = await this.addSignedUrlsToTracks(track);
      return trackWithSignedUrls;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${error.message}`);
    }
  }

  async addSignedUrlsToTracks(tracks) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
      const isArray = Array.isArray(tracks);
      const tracksArray = isArray ? tracks : [tracks];

      const tracksWithSignedUrls = await Promise.all(
        tracksArray.map(async (track) => {
          const trackObj = track.toObject ? track.toObject() : track;

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º coverUrl (–æ–±–ª–æ–∂–∫—É —Ç—Ä–µ–∫–∞)
          if (trackObj.coverUrl) {
            const coverFileName = extractFileName(trackObj.coverUrl);
            if (coverFileName) {
              const signedCoverUrl = await generateSignedUrl(
                coverFileName,
                7200
              ); // 2 —á–∞—Å–∞
              if (signedCoverUrl) {
                trackObj.coverUrl = signedCoverUrl;
              }
            }
          }

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º audioUrl (–∞—É–¥–∏–æ —Ñ–∞–π–ª)
          if (trackObj.audioUrl) {
            const audioFileName = extractFileName(trackObj.audioUrl);
            if (audioFileName) {
              const signedAudioUrl = await generateSignedUrl(
                audioFileName,
                7200
              ); // 2 —á–∞—Å–∞
              if (signedAudioUrl) {
                trackObj.audioUrl = signedAudioUrl;
              }
            }
          }

          // –ï—Å–ª–∏ —Ç—Ä–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –µ–≥–æ –∞–≤–∞—Ç–∞—Ä
          if (trackObj.artist && trackObj.artist.avatar) {
            const artistAvatarFileName = extractFileName(
              trackObj.artist.avatar
            );
            if (artistAvatarFileName) {
              const signedAvatarUrl = await generateSignedUrl(
                artistAvatarFileName,
                7200
              );
              if (signedAvatarUrl) {
                trackObj.artist.avatar = signedAvatarUrl;
              }
            }
          }

          return trackObj;
        })
      );

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø–æ–ª—É—á–∏–ª–∏
      return isArray ? tracksWithSignedUrls : tracksWithSignedUrls[0];
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö URL –¥–ª—è —Ç—Ä–µ–∫–æ–≤:", error);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const isArray = Array.isArray(tracks);
      const fallbackResult = isArray
        ? tracks.map((track) => ({
            ...(track.toObject ? track.toObject() : track),
            coverUrl: null,
            audioUrl: track.audioUrl, // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π audioUrl –ø—Ä–∏ –æ—à–∏–±–∫–µ
          }))
        : {
            ...(tracks.toObject ? tracks.toObject() : tracks),
            coverUrl: null,
            audioUrl: tracks.audioUrl, // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π audioUrl –ø—Ä–∏ –æ—à–∏–±–∫–µ
          };

      return fallbackResult;
    }
  }

  async convertExistingTrackToHLS(trackId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg
    const ffmpegAvailable = await this.checkSystemRequirements();
    if (!ffmpegAvailable) {
      throw new Error(
        "FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É @ffmpeg-installer/ffmpeg"
      );
    }

    let tempDir = null;

    try {
      const track = await Track.findById(trackId);

      if (!track || track.isHLS) {
        throw new Error("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤ HLS —Ñ–æ—Ä–º–∞—Ç–µ");
      }

      console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–∫ –≤ HLS: ${track.name}`);

      // –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
      const audioUrl = await generateSignedUrl(
        extractFileName(track.audioUrl),
        3600
      );
      const response = await fetch(audioUrl);
      const audioBuffer = Buffer.from(await response.arrayBuffer());

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HLS
      const hlsData = await processAudioToHLS(audioBuffer, track.name);
      tempDir = hlsData.tempDir;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º HLS —Ñ–∞–π–ª—ã
      const folderName = `hls/${Date.now()}-${track.name.replace(
        /[^a-zA-Z0-9]/g,
        "-"
      )}-converted`;

      const playlistUpload = await uploadToB2(
        {
          buffer: Buffer.from(hlsData.playlist),
          originalname: "playlist.m3u8",
          mimetype: "application/vnd.apple.mpegurl",
        },
        folderName
      );

      const segmentUploads = await Promise.all(
        hlsData.segments.map((segment) =>
          uploadToB2(
            {
              buffer: segment.buffer,
              originalname: segment.name,
              mimetype: "video/mp2t",
            },
            folderName
          )
        )
      );

      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (tempDir) {
        await fs.rm(tempDir, { recursive: true, force: true });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫
      track.audioUrl = playlistUpload.url;
      track.hlsSegments = segmentUploads.map((upload) => upload.url);
      track.isHLS = true;
      track.audioQuality = "128k";

      await track.save();

      console.log(`‚úÖ –¢—Ä–µ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ HLS: ${track._id}`);

      return await this.addSignedUrlsToTracks(track);
    } catch (error) {
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (tempDir) {
        try {
          await fs.rm(tempDir, { recursive: true, force: true });
        } catch (cleanupError) {
          console.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", cleanupError);
        }
      }

      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ HLS: ${error.message}`);
    }
  }

  async deleteTrack(trackId, userId) {
    try {
      const track = await Track.findById(trackId);

      if (!track) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
      if (track.uploadedBy.toString() !== userId) {
        return null;
      }

      await Track.findByIdAndDelete(trackId);
      return true;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${error.message}`);
    }
  }

  async updateTrack(trackId, updateData, userId) {
    try {
      const track = await Track.findById(trackId);

      if (!track) {
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      if (track.uploadedBy.toString() !== userId) {
        return null;
      }

      const updatedTrack = await Track.findByIdAndUpdate(
        trackId,
        { ...updateData, updatedAt: new Date() },
        { new: true }
      ).populate("uploadedBy", "name username avatar");

      return await this.addSignedUrlsToTracks(updatedTrack);
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${error.message}`);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ m3u8
const calculateDurationFromPlaylist = (playlist) => {
  const lines = playlist.split("\n");
  let totalDuration = 0;

  lines.forEach((line) => {
    if (line.startsWith("#EXTINF:")) {
      const duration = parseFloat(line.split(":")[1].split(",")[0]);
      totalDuration += duration;
    }
  });

  return totalDuration;
};

export default new TrackService();
