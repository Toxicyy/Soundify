import { useParams } from "react-router-dom";
import { useCallback, useEffect } from "react";
import Header from "../components/Playlist/Header";
import { usePlaylist } from "../hooks/usePlaylist";
import { usePlaylistTracks } from "../hooks/usePlaylistTracks";
import { usePlaylistSave } from "../hooks/usePlaylistSave";
import MainMenu from "../components/Playlist/MainMenu";
import type { Track } from "../types/TrackData";

export default function Playlist() {
  const { id } = useParams<{ id: string }>();

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
  const {
    playlist,
    hasUnsavedChanges,
    loading: playlistLoading,
    error: playlistError,
    updateLocal,
    fetchPlaylist,
  } = usePlaylist(id);

  // –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞
  const {
    tracks,
    isLoading: tracksLoading,
    error: tracksError,
    refetch: refetchTracks,
  } = usePlaylistTracks(id || "", {
    page: 1,
    limit: 100, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å drag & drop
    sortBy: "createdAt",
    sortOrder: -1,
  });

  // –•—É–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const { saveChanges, saving } = usePlaylistSave(id || "");

  // –û–±—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const isLoading = playlistLoading || tracksLoading;
  const error = playlistError || tracksError;

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∏–∑ API
  useEffect(() => {
    if (tracks.length > 0 && playlist && !hasUnsavedChanges) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
      updateLocal({
        tracks: tracks, // tracks —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è Track[]
        trackCount: tracks.length,
        totalDuration: tracks.reduce(
          (total, track) => total + (track.duration || 0),
          0
        ),
      });
    }
  }, [tracks, playlist, hasUnsavedChanges, updateLocal]);

  /**
   * –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ Track[] –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ
   */
  const getTracksAsArray = useCallback((): Track[] => {
    if (!playlist?.tracks) return tracks;

    // –ï—Å–ª–∏ tracks –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ —ç—Ç–æ –º–∞—Å—Å–∏–≤ Track[], –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (Array.isArray(playlist.tracks) && playlist.tracks.length > 0) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø
      const firstItem = playlist.tracks[0];
      if (
        typeof firstItem === "object" &&
        firstItem !== null &&
        "_id" in firstItem
      ) {
        return playlist.tracks as Track[];
      }
    }

    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ —Ö—É–∫–∞ usePlaylistTracks
    return tracks;
  }, [playlist?.tracks, tracks]);

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç–∞
   */
  const handleSavePlaylist = useCallback(async () => {
    if (!playlist || !hasUnsavedChanges) return;

    try {
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è, –±–µ–∑ —Ç—Ä–µ–∫–æ–≤)
      const updateData = {
        name: playlist.name,
        description: playlist.description,
        privacy: playlist.privacy,
        category: playlist.category,
        tags: playlist.tags,
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
      await saveChanges(updateData);

      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å —Ç—Ä–µ–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –ø–æ—Ä—è–¥–æ–∫
      const currentTracks = getTracksAsArray();
      if (currentTracks && currentTracks.length > 0) {
        const trackIds = currentTracks.map((track) => track._id);

        try {
          const token = localStorage.getItem("token");
          const response = await fetch(
            `http://localhost:5000/api/playlists/${id}/tracks/order`,
            {
              method: "PUT",
              headers: {
                Authorization: `Bearer ${token}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ 
                trackIds,
                skipValidation: true
              }),
            }
          );

          if (!response.ok) {
            throw new Error(`Failed to save track order: ${response.status}`);
          }
        } catch (orderError) {
          console.error("Error saving track order:", orderError);
          alert("Failed to save track order. Please try again.");
          return;
        }
      }
    } catch (error) {
      console.error("Error saving playlist:", error);
      alert(
        `Save failed: ${
          error instanceof Error ? error.message : "Failed to save playlist"
        }`
      );
    }
  }, [
    playlist,
    hasUnsavedChanges,
    saveChanges,
    id,
    refetchTracks,
    fetchPlaylist,
    getTracksAsArray,
  ]);

  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  const handleRefetch = useCallback(() => {
    if (id) {
      fetchPlaylist(id);
      refetchTracks();
    }
  }, [id, fetchPlaylist, refetchTracks]);

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
   */
  const handleDiscardChanges = useCallback(() => {
    const confirmDiscard = window.confirm(
      "Are you sure you want to discard all changes? This action cannot be undone."
    );

    if (confirmDiscard) {
      handleRefetch();
      console.log(
        "üìù Changes discarded - all unsaved changes have been reverted"
      );
    }
  }, [handleRefetch]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  if (error) {
    return (
      <div className="h-screen w-full mainMenu pl-[22vw] pr-[2vw] flex items-center justify-center">
        <div className="text-center bg-white/10 backdrop-blur-md rounded-2xl p-8 border border-white/20">
          <div className="w-16 h-16 mx-auto rounded-full bg-red-500/20 flex items-center justify-center mb-4">
            <svg
              className="w-8 h-8 text-red-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
              />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-white mb-2">
            Something went wrong
          </h2>
          <p className="text-white/70 mb-6">{error}</p>
          <button
            onClick={handleRefetch}
            className="px-6 py-3 bg-white/20 hover:bg-white/30 text-white rounded-lg transition-colors duration-200"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full mainMenu pl-[22vw] pr-[2vw] flex flex-col gap-5">
      <Header
        playlist={playlist}
        isLoading={isLoading}
        updateLocal={updateLocal}
        fetchPlaylist={fetchPlaylist}
      />

      <MainMenu
        playlist={playlist}
        isLoading={isLoading || saving}
        updateLocal={updateLocal}
        hasUnsavedChanges={hasUnsavedChanges}
        tracks={getTracksAsArray()} // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Track[]
        tracksError={tracksError}
      />

      {/* Floating Action Button –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {hasUnsavedChanges && (
        <div className="fixed bottom-8 right-8 z-50">
          <div className="flex items-center gap-3">
            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã */}
            <button
              onClick={handleDiscardChanges}
              className="px-4 py-2 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 text-red-400 rounded-lg transition-all duration-200 text-sm font-medium"
            >
              Discard
            </button>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            <button
              onClick={handleSavePlaylist}
              disabled={saving}
              className="px-6 py-3 bg-green-500 hover:bg-green-600 disabled:bg-green-500/50 text-white rounded-lg transition-all duration-200 font-medium shadow-lg hover:shadow-xl disabled:cursor-not-allowed flex items-center gap-2"
            >
              {saving ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
                  Saving...
                </>
              ) : (
                <>
                  <svg
                    className="w-4 h-4"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                  Save Changes
                </>
              )}
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
